Para cada questão, escreva funções em C e/ou sub-rotinas na linguagem Assembly do MSP430. Reaproveite funções e sub-rotinas de uma 
questão em outra, se assim desejar. Leve em consideração que as sub-rotinas são utilizadas em um código maior, portanto utilize 
adequadamente os registradores R4 a R11. As instruções da linguagem Assembly do MSP430 se encontram ao final deste texto.

(a) Escreva uma função em C que calcule a raiz quadrada x de uma variável S do tipo float, utilizando o seguinte algoritmo: após n+1 
iterações, a raiz quadrada de S é dada por x(n+1) = (x(n) + S/x(n))/2
O protótipo da função é: 
unsigned int Raiz_Quadrada(unsigned int S);

void unsigned int Raiz_Quadrada(unsigned int S)
{
  float x[0] = 0;
  int n;
  int i = 0;
  
  while( n >= i )
  {
   x[i+1] = (x[i] + (S/ x[i]))/2;
   }
   return x;
 }

(b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430. A variável S é fornecida pelo registrador R15, e a raiz quadrada de
S (ou seja, a variável x) é fornecida pelo registrador R15 também.

RAIZ_QUADRADA:
mov.w #0, R14
inc.w R5
mov.w #0, R13
LOOP:
mov.w #0, R13
mov.w R15, R12
cmp R14, R5
jeq EXIT
DIV:
cmp R12, #0
jeq END_DIV
sub.w R13, R12
inc.w R11
jmp DIV
END_DIV:
add.w R11, R13
rra.w R13
inc.w R14
jmp LOOp
EXIT:
mov.w R13, R15




(a) Escreva uma função em C que calcule x elevado à N-ésima potência, seguindo o seguinte protótipo:
int Potencia(int x, int N);

int Potencia(int x, int N);
{
 int i = 0;
 int j;
 j= x;
 for (i =0; i >= N; i++)
 {
  j= j*x;
 }
return j;
}
  
(b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430. x e n são fornecidos através dos registradores R15 e R14, 
respectivamente, e a saída deverá ser fornecida no registrador R15.
POTENCIA:
mov.w R15, R10
LOOP:
cmp R13, R14
jeq EXIT
mov.w #0, R12
MULT:
cmp R15, R12
jeq END_MULT
add.w R15, R10
inc.w R12
jmp MULT
END_MULT:
inc.w R13
jmp LOOP
EXIT:
mov.w R10, R15

Escreva uma sub-rotina na linguagem Assembly do MSP430 que calcula a divisão de a por b, onde a, b e o valor de saída são inteiros de 16
bits. a e b são fornecidos através dos registradores R15 e R14, respectivamente, e a saída deverá ser fornecida através do registrador 
R15.

DIV:
cmp R15, #0
jeq END_DIV
sub.w R14, R15
inc.w R13
jmp DIV
END_DIV:
mov.w R13, R15

Escreva uma sub-rotina na linguagem Assembly do MSP430 que calcula o resto da divisão de a por b, onde a, b e o valor de saída são 
inteiros de 16 bits. a e b são fornecidos através dos registradores R15 e R14, respectivamente, e a saída deverá ser fornecida através 
do registrador R15.
RESTO:
LOOP:
cmp R14, R15
jl EXIT
sub.w R14, R15
jump LOOP
EXIT:

(a) Escreva uma função em C que indica a primalidade de uma variável inteira sem sinal, retornando o valor 1 se o número for primo, e 0,
caso contrário. Siga o seguinte protótipo:

int Primalidade(unsigned int x);
{
 for(i =2; i < X; i++)
  {
   if (x%i == 0)
   return 0;
   }
  return 1;
 }
 
(b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430. A variável de entrada é fornecida pelo registrador R15, e o valor 
de saída também.

PRIMALIDADE:
mov.w R15, R14
sub.w #1, R14
mov.w #2, R12
RESTO:
LOOP:
cmp R12, R13
jl END_RESTO
sub.w R12, R13
jump LOOP
END_RESTO:
cmp R13, #0
jeq NPRIMO
cmp R12, R14
jeq PRIMO
inc.w R12
jmp RESTO
NPRIMO:
mov.w #0, R15
jmp Exit
PRIMO
mov.w #1, R15
EXIT:

Escreva uma função em C que calcula o duplo fatorial de n, representado por n!!. Se n for ímpar, n!! = 135*...n, e se n for par, 
n!! = 246...n. Por exemplo, 9!! = 13579 = 945 e 10!! = 2468*10 = 3840. Além disso, 0!! = 1!! = 1. O protótipo da função é:
unsigned long long DuploFatorial(unsigned long long n);

(a) Escreva uma função em C que calcula a função exponencial utilizando a série de Taylor da mesma. Considere o cálculo até o termo
n = 20. O protótipo da função é double ExpTaylor(double x); 

(b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430, mas considere que os valores de entrada e de saída são inteiros 
de 16 bits. A variável de entrada é fornecida pelo registrador R15, e o valor de saída também.

Escreva uma sub-rotina na linguagem Assembly do MSP430 que indica se um vetor esta ordenado de forma decrescente. Por exemplo: 
[5 4 3 2 1] e [90 23 20 10] estão ordenados de forma decrescente. [1 2 3 4 5] e [1 2 3 2] não estão. O primeiro endereço do vetor é 
fornecido pelo registrador R15, e o tamanho do vetor é fornecido pelo registrador R14. A saída deverá ser fornecida no registrador R15, 
valendo 1 quando o vetor estiver ordenado de forma decrescente, e valendo 0 em caso contrário.

Escreva uma sub-rotina na linguagem Assembly do MSP430 que calcula o produto escalar de dois vetores, a e b. O primeiro endereço do 
vetor a deverá ser passado através do registrador R15, o primeiro endereço do vetor b deverá ser passado através do registrador R14, e 
o tamanho do vetor deverá ser passado pelo registrador R13. A saída deverá ser fornecida no registrador R15.

(a) Escreva uma função em C que indica se um vetor é palíndromo. Por exemplo: [1 2 3 2 1] e [0 10 20 20 10 0] são palíndromos. 
[5 4 3 2 1] e [1 2 3 2] não são. Se o vetor for palíndromo, retorne o valor 1. Caso contrário, retorne o valor 0. O protótipo da função
é:

int Palindromo(int vetor[ ], int tamanho);

(b) Escreva a sub-rotina equivalente na linguagem Assembly do MSP430. O endereço do vetor de entrada é dado pelo registrador R15, o
tamanho do vetor é dado pelo registrador R14, e o resultado é dado pelo registrador R15.
